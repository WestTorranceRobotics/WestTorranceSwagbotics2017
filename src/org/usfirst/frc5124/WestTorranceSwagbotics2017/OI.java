// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.WestTorranceSwagbotics2017;

import org.usfirst.frc5124.WestTorranceSwagbotics2017.commands.*;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    


    public Joystick driver;
    public Joystick operator;

    public OI() {

        //joysticks
    	driver = new Joystick(0);
        operator = new Joystick(1);
        // SmartDashboard Buttons
        
        SmartDashboard.putData("Extend Pusher", new GearHolderExtendPusher());
        SmartDashboard.putData("Retract Pusher", new GearHolderRectractPusher());
        SmartDashboard.putData("Open", new GearHolderClose());
        SmartDashboard.putData("Close", new GearHolderOpen());

        
    }

    public Joystick getDriver() {
        return driver;
    }

    public Joystick getOperator() {
        return operator;
    }
    
	/*public double getLeft() {
	    if(Math.abs(driver.getRawAxis(1)) > 0.07) {
	    	return driver.getRawAxis(1);
	    } else {
	    	return 0;
	    }
	}
    	
    public double getRight() {	
       	if(Math.abs(driver.getRawAxis(5)) > 0.07) {
       		return driver.getRawAxis(5);
       	} else {
       		return 0;
        }	
    }*/
    
    public double getLeftSensitivity(double sens) {
	    if(Math.abs(driver.getRawAxis(1)) > 0.04) {
	    	return (sens * (Math.pow(driver.getRawAxis(1), 3))) + (driver.getRawAxis(1) * (1 - sens));
	    } else {
	    	return 0;
	    }
	}
    	
    public double getRightSensitvity(double sens) {	
       	if(Math.abs(driver.getRawAxis(5)) > 0.04) {
       		return (sens * (Math.pow(driver.getRawAxis(5), 3))) + (driver.getRawAxis(5) * (1 - sens));
       	} else {
       		return 0;
        }	
    }
    
    public double getLeftYAxis() {
    	if(Math.abs(driver.getRawAxis(1)) > 0.02) {
    		return driver.getRawAxis(1);
    	} else {
    		return 0;
    	}
    }
    
    public double getRightXAxis() {
    	if(Math.abs(driver.getRawAxis(4)) > 0.02) {
    		return driver.getRawAxis(4);
    	} else {
    		return 0;
    	}
    }
    
    public void vibrateDriver() {
    	driver.setRumble(GenericHID.RumbleType.kLeftRumble, 0.5);
    	driver.setRumble(GenericHID.RumbleType.kRightRumble, 1);
    }
    
    public void stopVibrate() {
    	driver.setRumble(GenericHID.RumbleType.kLeftRumble, 0);
    	driver.setRumble(GenericHID.RumbleType.kRightRumble, 0);
    }
    
    
    
    
}

